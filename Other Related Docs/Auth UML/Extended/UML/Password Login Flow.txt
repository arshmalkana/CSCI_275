
@startuml Password Login Flow
title Password-Based Login Flow (2-Step)

actor User
participant "Browser" as Browser
participant "Frontend\n(React)" as Frontend
participant "Backend\n(Fastify)" as Backend
participant "authController" as AuthController
participant "authService" as AuthService
participant "refreshTokenService" as TokenService
participant "PostgreSQL\nDatabase" as DB

== Step 1: Username Entry ==
User -> Browser: Navigate to /login
Browser -> Frontend: Load LoginScreen
Frontend --> Browser: Show Step 1\n(Username field + Login button)

User -> Browser: Enter username "admin"
User -> Browser: Click "Login" button
Browser -> Frontend: handleNextStep()

Frontend -> Frontend: Validate username not empty
Frontend -> Frontend: setIsLoading(true)

Frontend -> Backend: POST /v1/auth/webauthn/login/options\n{username: "admin"}
note right: Check if user has passkeys
Backend -> Controller: loginOptions(request)

alt User Has Passkeys
    Backend --> Frontend: 200 OK {options}
    Frontend -> Frontend: setShowPasskeyOption(true)\nsetUsePasswordMode(false)\nsetStep(2)
    Frontend --> Browser: Show Step 2 with\n- Username display box\n- "Login with Passkey" button\n- "Use password instead" link

else No Passkeys / User Not Found
    Backend --> Frontend: 400 Bad Request
    Frontend -> Frontend: setShowPasskeyOption(false)\nsetUsePasswordMode(true)\nsetStep(2)
    Frontend --> Browser: Show Step 2 with\n- Username display box\n- Password field\n- Remember me toggle\n- "Sign In with Password" button
end

== Step 2: Password Authentication ==
User -> Browser: Enter password
User -> Browser: Toggle "Remember me" ON
User -> Browser: Click "Sign In with Password"

Browser -> Frontend: handleLogin()
Frontend -> Frontend: Validate password not empty
Frontend -> Frontend: setIsLoading(true)

Frontend -> Backend: POST /v1/auth/login\n{\n  username: "admin",\n  password: "password123",\n  rememberMe: true\n}
note right: rememberMe determines\ntoken expiry (7d vs 90d)

Backend -> AuthController: login(request, reply)
AuthController -> AuthService: findStaffByUserId("admin")

AuthService -> DB: SELECT s.*, i.institute_name,\nd.district_name, t.tehsil_name\nFROM staff s\nLEFT JOIN institutes i ON ...\nWHERE LOWER(s.user_id) = LOWER('admin')\nAND s.is_active = TRUE
note right: Case-insensitive username lookup

alt User Found
    DB --> AuthService: User record with\n- staff_id\n- password_hash\n- user_role\n- full_name\n- email, mobile\n- institute info

    AuthService -> AuthService: verifyPassword(\n  password: "password123",\n  hash: user.password_hash\n)
    note right: Currently: Plain text comparison\nTODO: Argon2id hashing\n\nif (password === hash) return true

    alt Password Valid
        AuthService -> AuthService: generateTokens(user)
        note right
        Access Token:
        - Payload: {id, username, role}
        - Expiry: 15 minutes
        - Signed with JWT_SECRET

        Refresh Token:
        - Payload: {id, type: 'refresh'}
        - Expiry: 7d or 90d (rememberMe)
        - Signed with REFRESH_SECRET
        end note

        AuthService -> AuthService: Calculate expiry\ntokenExpiry = rememberMe ?\n  90 * 24 * 60 * 60 * 1000 :\n  7 * 24 * 60 * 60 * 1000

        AuthService -> TokenService: storeToken({\n  token: refreshToken,\n  staffId: user.staff_id,\n  userAgent: "Mozilla/5.0...",\n  ipAddress: "127.0.0.1",\n  expiresIn: tokenExpiry\n})

        TokenService -> TokenService: hashToken(refreshToken)\nconst hash = crypto\n  .createHash('sha256')\n  .update(token)\n  .digest('hex')

        TokenService -> TokenService: Parse user agent
        note right
        Extract from UA string:
        - Browser name & version
        - OS name & version
        - Device type
        Example: "Chrome 120 on Windows 10"
        end note

        TokenService -> DB: INSERT INTO refresh_tokens (\n  token_hash,\n  staff_id,\n  device_name,\n  user_agent,\n  ip_address,\n  expires_at,\n  created_at,\n  last_used_at,\n  is_revoked\n) VALUES (\n  $1, $2, $3, $4, $5,\n  NOW() + INTERVAL '$6 milliseconds',\n  NOW(), NOW(), FALSE\n)

        DB --> TokenService: token_id
        TokenService --> AuthService: Token stored

        AuthService -> AuthController: Return {\n  accessToken,\n  refreshToken,\n  user: {...}\n}

        AuthController -> AuthController: Set HTTP cookie\nreply.setCookie('refreshToken', token, {\n  httpOnly: true,\n  secure: process.env.NODE_ENV === 'production',\n  sameSite: 'strict',\n  maxAge: tokenExpiry,\n  path: '/'\n})
        note right
        HttpOnly: Prevents XSS attacks
        Secure: HTTPS only in production
        SameSite: Prevents CSRF attacks
        end note

        AuthController --> Backend: Response data
        Backend --> Frontend: 200 OK {\n  success: true,\n  user: {\n    id, username, name, role,\n    designation, institute,\n    district, tehsil,\n    mobile, email\n  },\n  token: accessToken,\n  expiresIn: "15m"\n}
        note right: Refresh token in\nHttpOnly cookie (not in JSON)

        Frontend -> Frontend: authService.setUser(user)\nlocalStorage.setItem('user', JSON.stringify(user))
        Frontend -> Frontend: Store accessToken in memory\n(not in localStorage)
        Frontend -> Browser: navigate('/home')
        Browser --> User: Logged in successfully

    else Password Invalid
        AuthService --> AuthController: throw Error("Invalid password")
        AuthController --> Backend: 401 response
        Backend --> Frontend: 401 Unauthorized {\n  success: false,\n  message: "Invalid username or password"\n}
        note right: Generic error message\nfor security (don't reveal\nwhich field is wrong)
        Frontend -> Frontend: setErrors({\n  general: "Invalid username or password"\n})
        Frontend --> Browser: Show error message
    end

else User Not Found
    DB --> AuthService: No record
    AuthService --> AuthController: null
    AuthController --> Backend: 401 response
    Backend --> Frontend: 401 Unauthorized {\n  success: false,\n  message: "Invalid username or password"\n}
    Frontend --> Browser: Show error message
end

== Step 2: Back Button ==
note over User, Browser: User can go back to Step 1
User -> Browser: Click "Back" button
Browser -> Frontend: handleBackToStep1()
Frontend -> Frontend: setStep(1)\nsetErrors({})\nsetUsePasswordMode(false)\nsetShowPasskeyOption(false)
Frontend --> Browser: Show Step 1\n(Username field + Login button)

== Forgot Password ==
note over User, Browser: From Step 2
User -> Browser: Click "Forgot password?"
Browser -> Frontend: handleForgotPassword()
Frontend -> Browser: navigate('/forgot-password')
Browser --> User: Forgot Password Screen
note right: Separate flow (not shown here)

@enduml
